imports("fetchDataByInterface.js");
d2js.exports.handleData = 
d2js.handleData = function(){
	var pageNum = 1;
	var currSum = 1;
	while(currSum > 0){
		var departments = fetchData({"dataType":"DEPARTMENT","lastId":pageNum});
		for(var i = 0; i < departments.length; i++){
			var curr = departments[i];
			if(!this.checkNodeExist(curr)){
				this.createNode({"id":"","name":curr.name,"parent_id": this.findParentId(curr.serialNumber),"def":{"serialNumber":curr.serialNumber}});
			}else{
				this.updateNode({"name":curr.name,"parent_id": this.findParentId(curr.serialNumber),"def":{"serialNumber":curr.serialNumber}});
			}
			if((this.getDefaultStationId({"serialNumber":curr.serialNumber}) == -1) && !"四川航空".equals(curr.name)){
				var stat = this.createDefaultStation({"id":"","node":this.findNodeId(curr.serialNumber),"status":"N","remarks":"该组织默认岗位","visibility":"V","is_root":"Y","kind":"B","name":"普通员工"})
				this.createStationRole({"id":"","sys_station":stat.id,"sys_role":this.getDefaultRoleId(),"bind_node":stat.node})
			}
		}
		currSum = departments.length;
		pageNum++;
	}
	
	pageNum = 1;
	currSum = 1;
	
	while(currSum > 0){
		var employees = fetchData({"dataType":"EMPLOYEE","lastId":pageNum});
		for(var i = 0; i<employees.length; i++){
			var curr = employees[i];
			if(!this.checkPersonExist(curr)){
				var nowPerson = this.createPerson({"id":"","name":curr.name,"address":curr.address,"tel":curr.contactWay.telephone,
					"mobile":curr.contactWay.mobile,"email":curr.contactWay.email,"username":curr.employeeNo,"birth":new Date(this.convertDate(curr.birthday,-8)),
					"gender":(curr.gender=='男')?'M':'F',"id_card":curr.identityNo,"tag":{"employeeNo":curr.employeeNo,"positions":curr.positions,"familyMembers":curr.familyMembers,"employmentStatus":curr.employmentStatus,"Manager":"false","serialNumber":curr.department.serialNumber},"password":"c984aed014aec7623a54f0591da07a85fd4b762d"});
		 		var nowEm = this.createEmployee({"id":"","employee_no":curr.employeeNo,"person":nowPerson.id,"state":curr.isDelete?"D":"A","nodes":this.findNodesOfEm(curr.department.serialNumber),"sys_stations":this.findStationsOfEm(curr.department.serialNumber)})
				
				if(!this.checkEmployeeStationExist({"employee":nowEm.id,"station":this.getDefaultStationId({"serialNumber":curr.department.serialNumber})}))
					this.createEmployeeStation({"id":"","employee":nowEm.id,"station":this.getDefaultStationId({"serialNumber":curr.department.serialNumber}),"kind":"B"});
			}else{
				var preRow = this.findPerNode(curr.employeeNo);
				
				var nowPerson = this.updatePerson({"name":curr.name,"address":curr.address,"tel":curr.contactWay.telephone,
					"mobile":curr.contactWay.mobile,"email":curr.contactWay.email,"username":curr.employeeNo,"birth":new Date(this.convertDate(curr.birthday,-8)),
					"gender":(curr.gender=='男')?'M':'F',"id_card":curr.identityNo,"tag":{"employeeNo":curr.employeeNo,"positions":curr.positions,"familyMembers":curr.familyMembers,"employmentStatus":curr.employmentStatus,"serialNumber":curr.department.serialNumber},"password":"c984aed014aec7623a54f0591da07a85fd4b762d"});
					var e = this.updateEmployee({"employee_no":curr.employeeNo,"person":nowPerson.id,"state":curr.isDelete?"D":"A","nodes":this.findNodesOfEm(curr.department.serialNumber),"sys_stations":this.findStationsOfEm(curr.department.serialNumber)});
//					if(this.isChanged({"serialNumber":curr.department.serialNumber,"employeeNo":curr.employeeNo})){
//						this.updateEmployeeStation({"employee":e.id,"station":this.getDefaultStationId({"serialNumber":curr.department.serialNumber}),"kind":"B"});
//					}
					if(preRow.serial != curr.department.serialNumber){
						this.updateEmployeeStation({"employee":e.id,"station":this.getDefaultStationId({"serialNumber":curr.department.serialNumber}),"kind":"B"});
					}
				
			}
				
		}
		currSum = employees.length;
		pageNum++;
	}
	
}

d2js.exports.isChanged =
d2js.isChanged = function(params){
		var sql = "select id from node where def ->'serialNumber' = '\""+params.serialNumber+"\"' limit 1";
		var row = this.queryRow(sql);
		
		var tsql = "select st.node as node from employee_station es, sys_station st where es.station = st.id and es.employee = (select id from employee where employee_no = ?)";
		var trow = this.queryRow(tsql,[params.employeeNo]);
		if(row.id == trow.node){
			return false;
		}else{
			return true;
		}
}

d2js.findPerNode = function(em){
	var sql = "select tag ->>'serialNumber' as serial from person where tag ->'employeeNo' = '\""+em+"\"'";
	return  this.queryRow(sql);
}

d2js.exports.once =
d2js.once = function (){
	var pageNum = 1;
	var currSum = 1;
	while(currSum > 0){
		var employees = fetchData({"dataType":"EMPLOYEE","lastId":pageNum});
		for(var i = 0; i<employees.length; i++){
			var curr = employees[i];
			var sql = "update person set tag = jsonb_set(tag,'{isDelete}','\""+curr.isDelete+"\"',true) where tag ->>'employeeNo' = '"+curr.employeeNo+"'";
			this.execute(sql);
			var tsql = "update person set tag = jsonb_set(tag,'{Manager}','\"false\"',true) where tag ->>'employeeNo' = '"+curr.employeeNo+"'";
			this.execute(tsql);
			var nsql = "update person set tag = jsonb_set(tag,'{serialNumber}','\""+curr.department.serialNumber+"\"',true) where tag ->>'employeeNo' = '"+curr.employeeNo+"'";
			this.execute(nsql);
		}
		currSum = employees.length;
		pageNum++;
	}
}

d2js.exports.test = 
d2js.test = function(rcd){
	return this.findPerNode('012019');
//	var sql = "update node set name = ? ,parent_id = ? ,type =?, def = ? where def ->'serialNumber' = ?";
	
//	this.updateRow("node",rcd,["name"],"def ->>'serialNumber'");
}


//通过部门名称检验该记录是否已存在
d2js.exports.checkNodeExist = 
d2js.checkNodeExist = function(dept){
	var isExist = false;
	var sql = "select * from node where def ->> 'serialNumber' = '" + dept.serialNumber + "' limit 1";
	var row = this.queryRow(sql);
	if(row){
		isExist = true;
	}
	return isExist;
}

//通过截取数据serialNumber字段确定父级
d2js.exports.findParentId = 
d2js.findParentId = function(serialNumber){
	println("该节点的serialNumber为" + serialNumber);
	if(serialNumber.length > 3){
		var parentSerialNumber = serialNumber.substring(0,serialNumber.length - 3);
		println("父节点的serialNumber为" + parentSerialNumber);
		var sql = "select id from node where def ->>'serialNumber' = '"+parentSerialNumber+"' limit 1";
		var row = this.query(sql).rows[0];
		return row.id;
	}else{
		return 0;
	}
}

//为每个机构创建默认岗位
d2js.exports.createDefaultStation = 
d2js.createDefaultStation = function(rcd){
	rcd.id = this.nextId("sys_station_id_seq");
	return this.insertRow('sys_station',rcd,["id","node","status","remarks","visibility","is_root","kind","name"]);
	
}
//通过serialNumber确定组织id，添加默认岗位时需要
d2js.exports.findNodeId = 
d2js.findNodeId = function(serialNumber){
	var sql = "select id from node where def ->>'serialNumber' = '"+serialNumber+"' limit 1";
	var row = this.query(sql).rows[0];
	return (row) ? row.id : 0;
}
//创建组织机构（根据serialNumber确定类型）
d2js.exports.createNode = 
d2js.createNode = function(rcd){
	rcd.id = this.nextId("node_id_seq");
	if(rcd.def.serialNumber.length == 3)
		rcd.type = 'COMPANY';
	else if(rcd.def.serialNumber.length == 6)
		rcd.type = "DEPT";
	else 
		rcd.type = 'OFFICE';
	
	return this.insertRow('node', rcd, ["id","name","parent_id","type","def"]);
}

//修改组织机构
d2js.exports.updateNode = 
d2js.updateNode = function(rcd){
	if(rcd.def.serialNumber.length == 3)
		rcd.type = 'COMPANY';
	else if(rcd.def.serialNumber.length == 6)
		rcd.type = "DEPT";
	else 
		rcd.type = 'OFFICE';
	var sql = "update node set name = '"+rcd.name+"',parent_id = "+rcd.parent_id+",type='"+rcd.type+"',def = jsonb_set(def,'{serialNumber}','\""+rcd.def.serialNumber+"\"') where def ->>'serialNumber' = '"+rcd.def.serialNumber+"'";
	return this.execute(sql);
}
//通过employeeNo检查人员是否存在
d2js.exports.checkPersonExist = 
d2js.checkPersonExist = function(p){
	var isExist = false;
	var sql = "select * from person where tag ->>'employeeNo' ='"+ p.employeeNo+"' limit 1";
	var row = this.queryRow(sql);
	if(row){
		isExist = true;
	}
	return isExist;
}

//创建person
d2js.exports.createPerson = 
d2js.createPerson = function(person){
	person.id = this.nextId("seq_entity");
	return this.insertRow("person",person,["id","name","address","tel","mobile","email","username","birth","gender","id_card","tag","password"]);
}
//修改person
d2js.exports.updatePerson = 
d2js.updatePerson = function(p){
	var sql = "update person set name='"+p.name+"',address='"+p.address+"',tel='"+p.tel+"',mobile='"+p.mobile+"'," +
	"email='"+p.email+"', username='"+p.username+"',tag = jsonb_set(tag,'{serialNumber}','\""+p.tag.serialNumber+"\"',true) where tag ->>'employeeNo' = '"+p.tag.employeeNo+"'";
	this.execute(sql);
	var tsql = "update person set tag = jsonb_set(tag,'{isDelete}','\""+p.tag.isDelete+"\"',true) where tag ->>'employeeNo' = '"+p.tag.employeeNo+"'";
	this.execute(tsql);
//	this.updateRow("person",person,["id","name","address","tel","mobile","email","username","birth","gender","tag","password"]);
	var sql = "select id from person where tag ->>'employeeNo' = ?";
	return this.queryRow(sql,[p.tag.employeeNo]);
}

d2js.exports.checkEmployeeExist = 
d2js.checkEmployeeExist = function(employeeNo){
	var sql = "select * from employee where employee_no = ?";
	var row = this.queryRow(sql,[employeeNo]);
	if(row){
		return true;
	}else{
		return false;
	}
}

//创建员工
d2js.exports.createEmployee = 
d2js.createEmployee = function(employee){
	employee.id = this.nextId("employee_id_seq1");
	employee.nodes = $ARRAY("int",employee.nodes);
	employee.sys_stations = $ARRAY("int",employee.sys_stations);
	return this.insertRow("employee",employee,["id","employee_no","person","state","nodes","sys_stations"]);
}

//修改员工
d2js.exports.updateEmployee = 
d2js.updateEmployee = function(employee){
	employee.nodes = $ARRAY("int",employee.nodes);
	employee.sys_stations = $ARRAY("int",employee.sys_stations);
	var upSql = "update employee set state = ?,nodes = ? where employee_no = ?";
	this.execute(upSql,[employee.state,employee.nodes,employee.employee_no]);
//	this.updateRow("employee",employee,["id","employee_no","person","state","nodes","sys_stations"]);
	var sql = "select * from employee where employee_no = ? and person = ?";
	return this.queryRow(sql,[employee.employee_no, employee.person]);
}

//查询员工所属的机构id
d2js.exports.findNodesOfEm = 
d2js.findNodesOfEm = function(serialNum){
	var sql = "select id from node where def ->>'serialNumber' = ? limit 1";
	return [this.queryScalar(sql, [serialNum])];
}

d2js.exports.findStationsOfEm = 
d2js.findStationsOfEm = function(serial){
	var sql = "select ss.id from sys_station ss,node n where ss.node = n.id and ss.name = '普通员工' and n.def ->>'serialNumber' = ? limit 1";
	return [this.queryScalar(sql,[serial])];
	
}
//检查employee_station中间表记录是否存在
d2js.exports.checkEmployeeStationExist = 
d2js.checkEmployeeStationExist = function(params){
	var sql = "select * from employee_station where employee = '"+params.employee+"' and station = '"+params.station+"' limit 1";
	var row = this.query(sql).rows[0];	
	if(row)
		return true;
	else
		return false;
		
}
d2js.exports.createEmployeeStation = 
d2js.createEmployeeStation = function(rcd){
	rcd.id = this.nextId("employee_station_id_seq");
	return this.insertRow("employee_station",rcd,["id","employee","station","kind"]);
}
d2js.exports.updateEmployeeStation = 
d2js.updateEmployeeStation = function(rcd){
	var sql = "delete from employee_station where employee = ?";
	this.execute(sql,[rcd.employee]);
	rcd.id = this.nextId("employee_station_id_seq");
	return this.insertRow("employee_station",rcd,["id","employee","station","kind"]);
}
d2js.exports.createPersonStation = 
d2js.createPersonStation = function(rcd){
	rcd.id = this.nextId("person_station_id_seq");
	return this.insertRow("person_station",rcd,["id","person","station"]);
}

//获取对应默认岗位的id
d2js.exports.getDefaultStationId = 
d2js.getDefaultStationId = function(params){
	var sql = "select ss.id from sys_station ss,node n where ss.node = n.id and ss.name = '普通员工' and n.def ->>'serialNumber' = '"+params.serialNumber+"' limit 1";
	var row = this.query(sql).rows[0];
	return (row)?row.id : -1;
}

d2js.exports.getDefaultRoleId = 
d2js.getDefaultRoleId = function(){
	var sql = "select id from sys_role where name = '普通用户'  and code = 'User' limit 1";
	var row = this.queryRow(sql);
	return row.id;
}


d2js.exports.createStationRole = 
d2js.createStationRole = function(rcd){
	rcd.id = this.nextId("sys_station_role_dispatch_id_seq");
	return this.insertRow('sys_station_role_dispatch',rcd,["id","sys_station","sys_role","bind_node"]);
}


// 本地时区和UTC时区的转化
d2js.exports.convertDate = 
d2js.convertDate = function convertTimezoneTimeToUTC(timeStr, offset) {
	if(timeStr != '' && timeStr != null){
		var d=new Date();
		var localOffset=d.getTimezoneOffset()*60000; //本地时区(PC系统时间)与UTC的偏移时间(毫秒)
		var gmtValue = -(d.getTimezoneOffset()/60); //本地时区(PC系统时间)的偏移值(如GMT+8即为8)
		var year = timeStr.substring(0, 4);
		var month = timeStr.substring(5, 7);
		var day = timeStr.substring(8, 10);
		var dateObj = new Date(parseInt(year), parseInt(month)-1, parseInt(day));
		var timeValue = dateObj.getTime();
		return timeValue + (localOffset) + (gmtValue - offset)*60*60*1000; //返回所选时区的本地时间所对应的UTC时间(毫秒)
	}else{
		return null;
	}
} 





