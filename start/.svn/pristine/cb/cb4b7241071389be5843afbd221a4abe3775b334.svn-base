imports("jssp-lib/cryptutil.js");
imports("jssp-lib/cookie.js");
imports("config/website.js");
imports("jslib/sha1.js");
d2js.testPwdByUsername = function(params){
	var username= this.session.user.username;
	logger.info("username:" + username);
	var getpwdSql='select password from person where upper(username) = :name or upper(wechat)= :name or upper(mobile) = :name or upper(email) = :name';
	rows = this.query(getpwdSql, {name : username.toUpperCase()}).rows;
	if (rows.length) {
		var r = rows[0];
		var pwd=r.password;
		pwd=CryptUtil.hexToByteArray(r.password);
		var enPwd =JSON.stringify(CryptUtil.mysqlEncrypt(pwd,this.session.random));
		var rcvPwd = JSON.stringify(CryptUtil.intArrayToByteArray(JSON.parse(params.oldpass)));
		if(enPwd != rcvPwd){
			throw new Error('用户名或密码不正确');
		}else{
//			this.out.print("{success:true}");
		}
	} else {
		throw new Error('用户名或密码不正确');
	}
};

d2js.validatePassword = function(pwdSha1, pwdInput){
	var pwd= CryptUtil.hexToByteArray(pwdSha1);
	var enPwd =CryptUtil.mysqlEncrypt(pwd, this.session.random);
	var recvPwd = CryptUtil.hexToByteArray(pwdInput);
	return enPwd.join() == recvPwd.join();
}

d2js.exports.random = 
d2js.random = function(){
	var random = java.util.UUID.randomUUID().toString();
	random=random.replace(/-/g,'').substr(0,20);
	this.session.random=random;
	return random;
}

d2js.userModifyPwd = function(params){
	var user=this.session.user;
	var newpass=params.newpass;
	if(newpass == '') {
		throw new Error('密码不正确');
	}
	var userModifyPwd='update person set password=?';
	this.updateRow('PERSON', {
		id : user.id,
		password : newpass
	});
};

d2js.exports.login = 
d2js.login = function(params, from) {
	var username = params.u, password = params.p;
	try {
		var sql, rows,ipBegin,ipEnd;
		
		//利用cookie登录，后面需要解决
		if (params.UUIDCookie && from=='cookie') {
			sql = 'select sys_user.*, node.name node_name, node.type node_type from sys_user,node where sys_user.node = node.id and autologin_uuid=?';
			rows = this.query(sql, [params.UUIDCookie]).rows;
		} else {
			if(requireValidCode){
				if (params.validation != null && this.session.validation != null && (params.validation.toUpperCase() == this.session.validation.toUpperCase())) {
					this.session.validation = null;
				} else {
					throw new Error('校验码不正确');
				}
			}
			var getpwdSql= 'select * from vw_employee v where upper(v.username) = :name or '
				+' upper(v.id_card) = :name or upper(v.employee_no) = :name' ;
			rows = this.query(getpwdSql, {name : username.toUpperCase()}).rows;
			if (rows.length) {
				var r = rows[0];
				if(r.tag &&　r.tag.Manager && r.tag.Manager == 'true'){
					logger.info('登录人员的Manager:'+ r.tag.Manager);
					var ipSql = "select value from system_parameter where name = 'ipBegin'";
					logger.info(JSON.stringify(this.queryRow(ipSql)));
					var result = this.queryRow(ipSql);
					logger.info("ip设置为" + JSON.stringify(result));
					
					var ipSetting = result.value;
					
					var ipAddress = this.request.getHeader("X-FORWARDED-FOR");  
					logger.info('通过X-FORWARDED-FOR获取的ip:'+ ipAddress);
					
					if(ipAddress != null && ipAddress.indexOf(',') != -1){
						ipAddress = ipAddress.split(', ')[0];
					}
					if (ipAddress == null || ipAddress.length() == 0 || "unknown".equalsIgnoreCase(ipAddress)) {  
						ipAddress = this.request.getRemoteAddr();  
						logger.info('通过remoteAddress获取的ip:' + ipAddress);
					}
					logger.info("ip:" + ipAddress);
					var ipFlag = false;
					var ipSections = ipSetting.split(','); 
					for(var i = 0; i< ipSections.length; i++){
						if(this.ipValid(ipSections[i],ipAddress)){
							ipFlag = true;
							break;
						}
					}
					if(!ipFlag){
						throw new Error('管理员不能用外网登录');
					}
				    logger.info("ip段限制：" + ipBegin + ipEnd);
				}
				var user = {"id":r.id,"login":{"action":"L"}};
				this.session.user = user;
				if(r.employee_no == null || r.employee_no.startsWith('O')){
					//
					var encryptPwd=this.encrypt(password.toUpperCase())
					if(!this.validatePassword(r.password, encryptPwd)){
						throw new Error('密码不正确');
					}
				}else{ 
					if(this.getLoginType(username,r) == '员工编号登录'){
						var isValid = this.checkEffeUser({"empNo":username,"p":params.p})
						if(!isValid){
							throw new Error('密码不正确');
						}
					}else{
						throw new Error('账号或密码错误');
					}
				}
			}else{
				throw new Error('系统没有该用户,请检查!');
			}
			
			sql = 'select * from vw_employee v where upper(v.username) = :name '
				+'or upper(v.wechat)= :name or upper(v.mobile) = :name or upper(v.email) = :name or upper(v.id_card) = :name or upper(v.employee_no) = :name' ;
			rows = this.query(sql, {name : username.toUpperCase()}).rows;
		}
		
		if (rows.length) {
			var r = rows[0];
			var currEmId = (r.id != 0)? r.employee : -1;
			if(this.existSameSession(currEmId)){
				var t = application['employee_' + currEmId];
				application['employee_' + currEmId].invalidate();
				this.login({'u':params.u,'p':params.p,'validation':params.validation}, null);
//				throw new Error('您的账号在另一地点登录，请先注销或者联系管理员强制注销');
			}
			
			user.login.description = "登录名为"+username+",登录类型为"+this.getLoginType(username,r);
			user.login.login_d = new Date();
			user.person = r; 
			user.username = r.name;
			var newCount = this.query("select count(1) from notify where "+this.session.user.person.id+"=any(receiver) and  ("+this.session.user.person.id+"<>all(read) or read is null)");
			this.session.newCount = newCount.rows[0].count+"";
			this.session.fileServiceURL = fileServiceURL;
			if(user.id != 0){
				if(rows.length > 1){
					this.response.sendRedirect('front/employeeChoose.jssp');
					return;
				}else{
					if(r.employee){
						var roles = this.findRoles(r.employee);
//						logger.info("ROLES:"+ JSON.stringify(roles));
						this.session.roles = roles;	
					}else{
						throw new Error('已离职用户不能登陆系统');
					}
				}
			}else{
//				var roles = this.findRoles(r.employee);
//				logger.info("ROLES:"+ JSON.stringify(roles));
				user.roles = [];
				user.functions = this.loadRootFunctions();
				user.role = {id : 0, name : '超级用户', role_level: 0};
				var subFunctions = this.loadRootSubFunctions();
				user.allowedFunctions = this.createAllowFunctionMask(user.functions, subFunctions);
				user.allowed = user.allowedFunctions;
			}
			this.response.sendRedirect('front/station_choose.jssp');
		} else {
			throw new Error('用户名或密码不正确');
		}
	} catch (e) {
		logger.error('login failed', wrapJsError(e));
		this.session.error = e;
		
		if(this.session.user){
			this.session.user.login.result_desc = e.message;
			this.session.user.login.result = "F";
			this.session.user.login.login_d = new Date();
			this.session.user.login.description = '账户'+username+'登录失败';
			this.callD2js('sys/login_log.d2js','create');
		}
//		logger.info(JSON.stringify(this.session.user));
		this.response.sendRedirect('index.jssp');
		throw e;
		
	}
};

// 创建可访问功能掩码
d2js.createAllowFunctionMask = function(functions, subs){
	var obj = {};
	for(var i=0; i<functions.length; i++){
		var fun = functions[i];
		switch(fun.dispatch_mode){
		case 'T' :
		case 'O' :
			obj[fun.code] = true;
		}
	}
	for(var i=0; i<subs.length; i++){
		var fun = subs[i];
		switch(fun.dispatch_mode){
		case 'T' :
		case 'O' :
			obj[fun.code] = true;
		}
	}
	return obj;
};

d2js.loadFunctions = function(role){
	if(this.executor.isOracle()){
		var sql =
			"with rf as\n" +
			" (select * from sys_role_function where sys_role = ?),\n" + 
			"fun as\n" + 
			" (select id, name, parent_id, menu_index, status, developer, code, uri, icon_url, \n" + 
			"         open_mode\n" + 
			"    from sys_function f\n" +
			"   where id in (select sys_function from rf)\n" +
			"  connect by parent_id = prior id\n" + 		
			"         and status IN ('N', 'H')\n" + 
			"   start with id = 0\n" + 
			"   order siblings by menu_index)\n" + 
			"select fun.*, rf.dispatch_mode from fun, rf where rf.sys_function = fun.id";
	} else if(this.executor.isPostgreSQL()){
		var sql =
			"WITH rf AS\n" +
			" (SELECT * FROM sys_role_function WHERE sys_role = ?),\n" + 
			"fun AS\n" + 
			" (WITH RECURSIVE t AS\n" + 
			"     (SELECT *, ARRAY[menu_index] menu_path\n" + 
			"       FROM sys_function\n" + 
			"      WHERE id = 0\n" + 
			"     UNION\n" + 
			"     SELECT d.*, menu_path || d.menu_index\n" + 
			"       FROM sys_function d, t\n" + 
			"      WHERE d.parent_id = t.id\n" + 
			"        AND d.status IN ('N', 'H')\n" + 
			"        AND d.id IN (SELECT sys_function FROM rf))\n" + 
			"    SELECT id, NAME, parent_id, menu_index, status, developer, code, uri, icon_url, \n" + 
			"           open_mode\n" + 
			"      FROM t\n" + 
			"     ORDER BY menu_path)\n" + 
			"SELECT fun.*, rf.dispatch_mode FROM fun, rf WHERE rf.sys_function = fun.id";
	}
	return this.query(sql, [role]).rows;
};

d2js.loadSubFunctions = function(role){
	var sql =
		"select sf.id, sf.name, sf.code, sf.menu_index, sf.status, 'O' dispatch_mode\n" +
		"  from sys_role_function rf, sys_function f, sub_function sf\n" + 
		" where rf.sys_role = ?\n" + 
		"   and rf.sys_function = f.id\n" + 
		"   and f.status IN ('N', 'H')\n" + 
		"   and sf.status = 'N'\n" + 
		"   and sf.sys_function = f.id\n" + 
		"   and not exists (select 1\n" + 
		"          from sys_role_sub_function ssf\n" + 
		"         where ssf.sub_function = sf.id\n" + 
		"           and ssf.sys_role = ?\n" + 
		"           and ssf.dispatch_mode = 'D')";

	return this.query(sql, [role, role]).rows;
};
d2js.loadRootFunctions = function(){
	if(this.executor.isOracle()){
		var sql = 
			"select id, name, parent_id, menu_index, status, developer, code, uri, icon_url, \n" +
			"       open_mode, 'T' dispatch_mode \n" + 
			"  from sys_function f\n" + 
			"connect by parent_id = prior id\n" + 
			"       and status IN ('N', 'H')\n" + 
			" start with id = 0\n" + 
			" order siblings by menu_index";
	} else if(this.executor.isPostgreSQL()){
		var sql = 
			"WITH RECURSIVE t AS\n" +
			" (SELECT *, ARRAY [ menu_index ] menu_path\n" + 
			"    FROM sys_function\n" + 
			"   WHERE id = 0\n" + 
			"  UNION\n" + 
			"  SELECT d.*, menu_path || d.menu_index\n" + 
			"    FROM sys_function d, t\n" + 
			"   WHERE d.parent_id = t.id\n" + 
			"     AND d.status IN ('N', 'H'))\n" + 
			"SELECT id, NAME, parent_id, menu_index, status, developer, code, uri, icon_url, \n" + 
			"       open_mode, 'T' dispatch_mode\n" + 
			"  FROM t\n" + 
			" ORDER BY menu_path";
	}
	return this.query(sql, []).rows;
};

d2js.loadRootSubFunctions = function(){
	var sql = 
		"select id, name, menu_index, status, code, dependence, \n" +
		"       'T' dispatch_mode \n" + 
		"  from sub_function f where status IN ('N', 'H')"; 
	return this.query(sql, []).rows;
};

d2js.exports.logout = 
d2js.logout = function(params){
	if(params.em){
		session = application['employee_' + params.em];
		session.invalidate();
	}else{
		logger.info(">>>>>>>>>>>>>>>>>>>>>>"+params.error);
		this.session.invalidate();
		this.response.sendRedirect('index.jssp?_m=logout');
	}
};

d2js.exports.shiftRole = true;
d2js.shiftRole = function(params){
	var chooseIdx = params.chooseIdx;
	this.session.user.login.description = '切换角色到'+this.session.user.node.name+"的"+this.session.stationChooses[chooseIdx].roles.map(function(a){return a.name}).join();
	this.session.user.login.action = "O";
	this.session.func = null;
	this.response.sendRedirect('front/station_choose.jssp?choose='+chooseIdx);
	
//	var idx = Array.prototype.find.call(roles, function(r){return r.id == role;}); 
//	//TODO 检查角色是否被删除
//	role = roles[idx];
//	if(role.node_scope == 'R'){
//		user.node = role.node;
//		user.node_name = role.node_name;
//	}
//	user.role = role;
//	
//	user.functions = this.loadFunctions(role.id);
//	
//	this.response.sendRedirect(r.company.customerFrontPage || 'front/main.jssp');
};

d2js.findEmployeeByPerson = function(personId){
	var sql = "select * from employee where person = '"+personId+"'";
	return this.query(sql).rows;
}


d2js.findRoles = function(eId){
	var sql = "select ss.id station_id, ss.name station_name,node.name node_name,node.id node_id, sr.name role_name,sr.* from sys_station ss,employee_station es,person p,employee e, sys_station_role_dispatch ssrd,sys_role sr,node " 
	+"where p.id = e.person and e.id = es.employee and ss.id = es.station and ss.id = ssrd.sys_station and sr.id = ssrd.sys_role and ssrd.bind_node = node.id and e.id = ?"
	
	return this.query(sql,[eId]).rows;
	
}

d2js.existSameSession = function(emId){
	var sql ="select * from online_user where em_id = ?";
	var row = this.queryRow(sql,[emId]);
	if(row){
		return true;
	}
//	try{
//		return application['employee_' + emId] && application['employee_' + emId].creationTime;
//	}catch(e){
//		
//	}
}

d2js.getLoginType = function(loginName,row){
	if(loginName == row.mobile){
		return "手机号登录";
	}else if(loginName == row.wechat){
		return "微信号登录";
	}else if(loginName == row.email){
		return "邮箱登录";
	}else if(loginName == row.id_card){
		return "身份证号登录";
	}else if(loginName == row.employee_no){
		return "员工编号登录";
	}else{
		return "用户名登录";
	}	
}
d2js.exports.checkEffeUser = d2js.checkEffeUser = function(params){
	return true;
	/*
	logger.info(params.empNo+'   '+params.p);
	var urlname = "http://172.18.8.168:10000/SINGPOINT/services/ValidEffectUser";
    var  s = new  org.apache.axis.client.Service();
    var call = s.createCall();
    call.setTargetEndpointAddress(urlname);
    call.setOperationName("validatorLegalUser");
    var para = [params.empNo,params.p];
    var val = call.invoke(para);
    var doc = org.dom4j.DocumentHelper.parseText(val);
    var root = doc.getRootElement();
	var t = root.element("code");
    logger.info( "result:"  + val + ":" + t.getText());
    if('0' == t.getText()){
    	return true;
    }else{
    	return false;
    }*/
}

d2js.exports.encrypt = 
d2js.encrypt = function (pwd){
	var pwd2=CryptoJS.SHA1(pwd);
	logger.info("SHA:"+pwd2);
	var random = this.session.random;
	var arrRandom = [];
	for(var i=0; i<random.length; i++)
		arrRandom.push(random.charCodeAt(i));
	var arrInt = [];
	for(var i=0; i<arrRandom.length;i+=4){
		var int = (arrRandom[i] << 24) | 
					(arrRandom[i+1] << 16) |
					(arrRandom[i+2] << 8) |
					arrRandom[i+3];
		arrInt.push(int);
	}
	
	
	var concated = arrInt.concat(CryptoJS.SHA1(pwd2).words);

	var b = CryptoJS.SHA1({words : concated, sigBytes : 40});
	
	var arr=[];
	for(var i=0;i<5;i++){
		var r = pwd2.words[i] ^ b.words[i];
		arr.push(r);
	}
	return CryptoJS.lib.WordArray.create(arr).toString();
}

d2js.exports.ipValid = 
d2js.ipValid = function(ipSection,ip){
    var ipSection = ipSection.trim();     
    var ip = ip.trim();     
    if(!ipSection)
    	return true;
    var idx = ipSection.indexOf('-');     
    var sips = ipSection.substring(0, idx).split("\\.");     
    var sipe = ipSection.substring(idx + 1).split("\\.");     
    var sipt = ip.split("\\.");     
    var ips = 0, ipe = 0, ipt = 0;     
    for (var i = 0; i < 4; ++i) {     
        ips = ips << 8 | parseInt(sips[i]);     
        ipe = ipe << 8 | parseInt(sipe[i]);     
        ipt = ipt << 8 | parseInt(sipt[i]);     
    }     
    if (ips > ipe) {     
        var t = ips;     
        ips = ipe;     
        ipe = t;     
    }     
    return ips <= ipt && ipt <= ipe; 
}


