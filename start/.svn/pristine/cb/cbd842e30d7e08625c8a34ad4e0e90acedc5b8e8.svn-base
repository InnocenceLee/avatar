<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.2//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rkjh.eschool.dao.ExamPaperDao">
	
	<select id="list" resultType="java.util.Map"  parameterType="java.util.Map">
	    <!-- <![CDATA[select a.id,a.name,a.difficulty,a.question_count,array_to_string(a.knowledges,',') knowledges,a.variance,a.mode,a.content,a.duration,a.state,a.totle_score,belong,to_char(a.create_date, 'YYYY-MM-DD') create_date,a.person personId,a.p_type,a.quesions_num,a.node,
	    b.name personName,e.id nodeId,e.name nodeName,a.discribe,paper_log
	    from exam_paper a,person b,person_station c,sys_station d,node e where a.person = b.id and b.id = c.person and c.station=d.id and d.node=e.id
	    ]]> -->
	    ${nodeSql}
	    SELECT
			A . ID,
			A . NAME,
			A .difficulty,
			A .question_count,
			array_to_string(A .knowledges, ',') knowledges,
			A .variance,
			A . MODE,
			A . CONTENT,
			A .duration,
			A . STATE,
			A .totle_score,
			A.belong,
			to_char(A .create_date, 'yyyy-MM-dd hh24:mi:ss') create_date,
			A .person personId,
			A .p_type,
			A .quesions_num,
			A .node,
			b. NAME personName,
			d. ID nodeId,
			d. NAME nodeName,
			A .discribe,
			A.paper_log #>>'{data,0,result}' as result,
			(select knowledge_point.title from knowledge_point WHERE knowledge_point.id = cast(array_to_string(A .knowledges, ',') as integer )) AS knowledgestitle
			
		FROM
			exam_paper A
			join person b
			on a.person = b.id
			join node d
			on a.node = d.id
	    <!-- <if test="id != 0"> -->
	    <if test="id != -1">  
	        and a.id = #{id}
	    </if> 
	    <if test="name != null and name != ''">  
	        and a.name like '%'||#{name}||'%'
	    </if> 
	    <if test="state != null and state != ''">  
	        and a.state = #{state}  
	    </if>  
	    <if test="mode != null and mode != ''">  
	        and a.mode = #{mode}  
	    </if>  
	    
		order by A.create_date desc limit  #{size} offset #{start} 
	</select>


	<select id="listCount" resultType="java.lang.Integer"  parameterType="java.util.Map">
	   <!-- <![CDATA[select count(1)
	    from exam_paper a,person b,person_station c,sys_station d,node e where a.person = b.id and b.id = c.person and c.station=d.id and d.node=e.id
	    ]]> -->
	    ${nodeSql}
	    SELECT
			count(a.id)
		FROM
			exam_paper A
			join person b
			on a.person = b.id
			join nd d
			on a.node = d.id
	    <!-- <if test="id != 0">  -->
	    <if test="id != -1"> 
	        and a.id = #{id}
	    </if> 
	    <if test="state != null and state != ''">  
	        and a.state = #{state}  
	    </if>  
	    <if test="mode != null and mode != ''">  
	        and a.mode = #{mode}  
	    </if>  
	</select>
	
	<!-- 试卷列表（审核已通过） -->
	<select id="listPassAuditing" resultType="java.util.Map"  parameterType="java.util.Map">
	    <!-- <![CDATA[select a.id,a.name,a.difficulty,a.question_count,array_to_string(a.knowledges,',') knowledges,a.variance,a.mode,a.content,a.duration,a.state,a.totle_score,belong,to_char(a.create_date, 'YYYY-MM-DD') create_date,a.person personId,a.p_type,a.quesions_num,a.node,
	    b.name personName,e.id nodeId,e.name nodeName,a.discribe,paper_log
	    from exam_paper a,person b,person_station c,sys_station d,node e where a.person = b.id and b.id = c.person and c.station=d.id and d.node=e.id
	    ]]> -->
	    ${nodeSql}
	    SELECT
			A . ID,
			A . NAME,
			A .difficulty,
			A .question_count,
			array_to_string(A .knowledges, ',') knowledges,
			A .variance,
			A . MODE,
			A . CONTENT,
			A .duration,
			A . STATE,
			A .totle_score,
			A.belong,
			to_char(A .create_date, 'YYYY-MM-DD') create_date,
			A .person personId,
			A .p_type,
			A .quesions_num,
			A .node,
			b. NAME personName,
			d. ID nodeId,
			d. NAME nodeName,
			A .discribe,
			A.paper_log
		FROM
			exam_paper A
			join person b
			on a.person = b.id
			join nd d
			on a.node = d.id
	    <!-- <if test="id != 0"> -->
	    <if test="id != -1">  
	        and a.id = #{id}
	    </if> 
	    <if test="name != null and name != ''">  
	        and a.name like '%'||#{name}||'%'
	    </if> 
	    <if test="state != null and state != ''">  
	        and a.state = #{state}  
	    </if>  
	    <if test="mode != null and mode != ''">  
	        and a.mode = #{mode}  
	    </if>  
		where 
			a.state = 'A'
		limit  #{size} offset #{start}
	</select>
	<select id="getExamPaperById" resultType="java.util.Map"  parameterType="java.lang.Integer">
		select 
			id,name,difficulty,question_count,array_to_string(knowledges, ',') as knowledges,variance,mode,
			  content,
			  duration,
			  state,
			  totle_score,
			  belong,
			  create_date,
			  person,
			  p_type,
			  node,
			  quesions_num,
			  question_count,
			  paper_log #>>'{data,0,result}' result,
			  discribe from exam_paper where #{id}=id
	
	</select>

  
	<select id="listPassAuditingCount" resultType="java.lang.Integer"  parameterType="java.util.Map">
	   <!-- <![CDATA[select count(1)
	    from exam_paper a,person b,person_station c,sys_station d,node e where a.person = b.id and b.id = c.person and c.station=d.id and d.node=e.id
	    ]]> -->
	    ${nodeSql}
	    SELECT
			count(a.id)
		FROM
			exam_paper A
			join person b
			on a.person = b.id
			join nd d
			on a.node = d.id
	    <!-- <if test="id != 0">  -->
	    <if test="id != -1"> 
	        and a.id = #{id}
	    </if> 
	    <if test="state != null and state != ''">  
	        and a.state = #{state}  
	    </if>  
	    <if test="mode != null and mode != ''">  
	        and a.mode = #{mode}  
	    </if>  
		where 
			a.state = 'A'
	</select>
	
	<select id="auditList" resultType="java.util.Map"  parameterType="java.util.Map">
	    <![CDATA[
	        select id,name,difficulty,question_count,array_to_string(knowledges,',') knowledges,variance,mode,content,duration,state,totle_score,belong,to_char(a.create_date, 'YYYY-MM-DD') create_date,person,p_type,quesions_num,node from exam_paper 
	        where 1=1 
	    ]]>
	    <if test="id != null">  
	        and id = #{id}
	    </if>
	    <if test="state != null">  
	        and state = #{state}  
	    </if> 
	    <if test="mode != null">  
	        and mode = #{mode}  
	    </if>  
	    <if test="size != null and start!=null">  
	        limit  #{size} offset #{start}
	    </if> 
		
	</select>
	
	<insert id="add" useGeneratedKeys="true" keyProperty="id" parameterType="java.util.Map">
		insert into exam_paper(id,name,difficulty,question_count,knowledges,variance,mode,content,duration,state,totle_score,belong,create_date,person,p_type,quesions_num,node,discribe)
 			values(DEFAULT,#{name},#{difficulty},#{question_count},ARRAY[
 			<foreach collection="knowledges" index="index" item="item" separator=",">   
       	 		#{item}   
    		</foreach>
 			],#{variance},#{mode},#{content,jdbcType=OTHER,typeHandler=JSONOBJECT},#{duration},#{state},#{totle_score},#{belong},#{create_date},#{person},#{p_type},#{quesions_num,jdbcType=OTHER,typeHandler=JSONOBJECT},#{node},#{discribe})
	</insert>
	
	<update id="updateOne" parameterType="java.util.Map">
		update 
			exam_paper 
				set 
					<if test="content != null">  
				        content=#{content,jdbcType=OTHER,typeHandler=JSONOBJECT}
				    </if>
					<if test="totalScore != null">
						,totle_score = #{totalScore}
					</if>
					<if test="questionCount != null">
						,question_count = #{questionCount,jdbcType=INTEGER} 
					</if>
					<if test="questionsNum != null">
						,quesions_num = #{questionsNum,jdbcType=OTHER,typeHandler=JSONOBJECT} 
					</if>
						where 
							id = #{id}
	</update>
	
	<update id="update" parameterType="java.util.Map">
		update 
			exam_paper 
				set 
				    id = #{id}
				    <if test="name != null">  
					,name=#{name}
					</if>
					<if test="difficulty != null">
					,difficulty=#{difficulty}
					</if>
					<if test="question_count != null">
					,question_count=#{question_count}
					</if>
					 <if test="knowledges != null">
						,knowledges=ARRAY[
			 			<foreach collection="knowledges" index="index" item="item" separator=",">   
			       	 		#{item}   
			    		</foreach>]
					</if>
					<if test="variance != null">
					,variance=#{variance}
				    </if>
					<if test="mode != null">
					,mode=#{mode}
					</if>
					<if test="content != null">
					,content=#{content,jdbcType=OTHER,typeHandler=JSONOBJECT}
					</if>
					<if test="duration != null">
					,duration=#{duration}
					</if>
					<if test="state != null">
					,state=#{state}
					</if>
					<if test="totle_score != null">
					,totle_score=#{totle_score}
					</if>
					<if test="belong != null">
					,belong=#{belong}
					</if>
					<if test="create_date != null">
					,create_date=#{create_date}
					</if>
					<if test="person != null">
					,person=#{person}
					</if>
					<if test="p_type != null">
					,p_type=#{p_type}
					</if>
					<if test="quesions_num != null">
					,quesions_num=#{quesions_num,jdbcType=OTHER,typeHandler=JSONOBJECT}
					</if>
					<if test="node != null">
					,node=#{node}
					</if>
					<if test="discribe != null">
					,discribe=#{discribe}
					</if>
					<if test="auditLog != null">
					,paper_log=#{auditLog,jdbcType=OTHER,typeHandler=JSONOBJECT}
					</if>
				where 
					id = #{id}
	</update>

	<resultMap type="java.util.Map" id="paperDetail">
		<id column="id" property="id"/>
		<result column="name" property="name"/>
		<result column="difficulty" property="difficulty"/>
		<result column="question_count" property="question_count"/>
		<result column="knowledges" property="knowledges"/>
		<result column="variance" property="variance"/>
		<result column="mode" property="mode"/>
		<result column="content" property="content"/>
		<result column="duration" property="duration"/>
		<result column="state" property="state"/>
		<result column="totle_score" property="totle_score"/>
		<result column="belong" property="belong"/>
		<result column="create_date" property="create_date"/>
		<result column="person" property="person"/>
		<result column="node" property="node"/>
		<result column="quesions_num" property="quesions_num"/>
		<result column="discribe" property="discribe"/>
	</resultMap>
	<delete id="dels" parameterType="java.lang.Integer">
		delete from exam_paper where id in 
		<foreach collection="array" index="index" item="item" open="(" separator="," close=")">   
       	 	#{item}   
    	</foreach>
	</delete>
</mapper>