<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.2//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rkjh.eschool.dao.NonEntryManagementDao">
	
	<resultMap type="java.util.Map" id="personMap">  
	    <id column="id" property="id"/>
	    <result column="username" property="username" />
	    <result column="name" property="name" />
	    <result column="gender" property="gender" />
	    <result column="node_id" property="nodeId" />
	    <result column="node_name" property="nodeName" />
	    <result column="id_card" property="idCard" />
  	</resultMap>
  	
  	<select id="getPersonByIds" resultMap="personMap">
  		SELECT
				A.ID AS ID,
				A.NAME AS NAME,
				A.GENDER,
				D.ID AS NODE_ID,
				D.NAME AS NODE_NAME,
				A.ID_CARD
			FROM
				PERSON AS A
			LEFT JOIN PERSON_STATION AS B
				ON A.ID = B.PERSON
			LEFT JOIN SYS_STATION AS C
				ON B.STATION = C.ID
			LEFT JOIN NODE AS D
				ON C.NODE = D.ID
		    where a.id in
		    <foreach collection="ids" item="item" index="index" separator="," close=")" open="(">
					#{item}  
	    	</foreach>
  	</select>
	
  	 <select id="getPersonById" parameterType="int" resultType="java.util.Map">
  		SELECT
				A.ID AS ID,
				A.NAME AS NAME,
				A.GENDER,
				D.ID AS NODE_ID,
				D.NAME AS NODE_NAME,
				A.ID_CARD,
				A.TAG
			FROM
				PERSON AS A
			LEFT JOIN PERSON_STATION AS B
				ON A.ID = B.PERSON
			LEFT JOIN SYS_STATION AS C
				ON B.STATION = C.ID
			LEFT JOIN NODE AS D
				ON C.NODE = D.ID
		    where A.id = #{value}
  	</select>
	<select id="list" resultMap="personMap" parameterType="java.util.Map">
	    SELECT *
		FROM (
			SELECT
				A.ID AS ID,
				A.USERNAME AS USERNAME,
				A.NAME AS NAME,
				A.GENDER,
				D.ID AS NODE_ID,
				D.NAME AS NODE_NAME,
				A.ID_CARD,
				A.TAG,
				A.TAG->>'intentDepatment' AS nodeName
				
			FROM
				PERSON AS A
			LEFT JOIN EMPLOYEE AS E 
				ON A.ID = E.PERSON
			LEFT JOIN EMPLOYEE_STATION AS B
				ON E.ID = B.EMPLOYEE
			LEFT JOIN SYS_STATION AS C
				ON B.STATION = C.ID
			LEFT JOIN NODE AS D
				ON C.NODE = D.ID
			WHERE 1=1 and e.state = 'N'
			<if test="name != NULL and name != ''">
				AND A.NAME like '%'||#{name}||'%'
			</if> 
			<if test="nodeName != NULL and nodeName != ''">
				AND D.NAME like '%'||#{nodeName}||'%'
			</if> 
			<if test="personId != NULL">
				AND A.ID = #{personId,jdbcType=INTEGER}
			</if> 
		)A
		WHERE A.ID &lt;= (
			SELECT B.ID
			FROM (
				SELECT
					A.ID AS ID,
					A.NAME AS NAME,
					A.GENDER,
					D.ID AS NODE_ID,
					D.NAME AS NODE_NAME,
					A.ID_CARD
				FROM
					PERSON AS A
				LEFT JOIN EMPLOYEE E
					ON A.ID = E.PERSON 
				LEFT JOIN EMPLOYEE_STATION AS B
					ON E.ID = B.EMPLOYEE
				LEFT JOIN SYS_STATION AS C
					ON B.STATION = C.ID
				LEFT JOIN NODE AS D
					ON C.NODE = D.ID
				WHERE 1=1 and e.state = 'N'
				<if test="name != NULL and name != ''">
					AND A.NAME like '%'||#{name}||'%'
				</if> 
				<if test="nodeName != NULL and nodeName != ''">
					AND D.NAME like '%'||#{nodeName}||'%'
				</if>  
				<if test="personId != NULL">
					AND A.ID = #{personId,jdbcType=INTEGER}
				</if> 
			)B
			ORDER BY B.ID DESC
			LIMIT 1
			OFFSET #{page}
			)
		ORDER BY A.ID DESC
		LIMIT #{size}
	</select>
	
	<select id="count4List" resultType="java.lang.Integer">
		SELECT count(a.id)
		FROM
			PERSON AS A
		LEFT JOIN EMPLOYEE AS E
			ON A.ID = E.PERSON 
		LEFT JOIN EMPLOYEE_STATION AS B
			ON E.ID = B.EMPLOYEE
		LEFT JOIN SYS_STATION AS C
			ON B.STATION = C.ID
		LEFT JOIN NODE AS D
			ON C.NODE = D.ID
		WHERE 1=1 and e.state = 'N'
		<if test="name != NULL and name != ''">
			AND A.NAME like '%'||#{name}||'%'
		</if> 
		<if test="nodeName != NULL and nodeName != ''">
			AND D.NAME like '%'||#{nodeName}||'%'
		</if>  
		<if test="personId != NULL">
			AND A.ID = #{personId}
		</if> 
	</select>
	
	<delete id="del">
		delete from PERSON
		where id = ANY (
        ARRAY[
				<foreach collection="list" item="item" index="index" separator="," >
					#{item}  
	    		</foreach>
			]
		::integer[]);
	</delete>
	
	<select id="add"  parameterType="java.util.Map" resultType="java.lang.Integer">
		insert into person(id
		,name
		,gender
		,id_card
		,tag
		,password
		,username
		)
		values(nextval('seq_entity')
		,#{name,jdbcType=VARCHAR}
		,#{gender,jdbcType=VARCHAR}
		,#{idCard,jdbcType=VARCHAR}
		,#{tag,jdbcType=VARCHAR, typeHandler=JSONOBJECT}
		,'c984aed014aec7623a54f0591da07a85fd4b762d'
		,#{employeeNo,jdbcType=VARCHAR}) returning id
	</select>
	
	<select id="addEmployee"  parameterType="java.util.Map" resultType="java.lang.Integer">
		insert into employee(id
		,employee_no
		,person
		,state
		,nodes
		,sys_stations
		)
		values(nextval('employee_id_seq1')
		,#{employeeNo,jdbcType=VARCHAR}
		,#{personId,jdbcType=INTEGER}
		,'N'
		,ARRAY[
 			<foreach collection="nodes" index="index" item="item" separator=",">   
       	 		#{item}   
    		</foreach>
 			]
 		,ARRAY[
 			<foreach collection="stations" index="index" item="item" separator=",">   
       	 		#{item}   
    		</foreach>
 			]	
		) RETURNING id
	</select>
	
	<insert id="addEmployeeStation">
		insert into employee_station(id,employee,station,kind) values
		(default,#{employeeId,jdbcType=INTEGER},#{stationId,jdbcType=INTEGER},'L')
	</insert>
	
	<select id="findDefaultStationId" resultType="java.lang.Integer">
		select id from sys_station where is_root = 'N' and kind = 'L' and name = '未入职岗位' limit 1
	</select>
	
	<select id="findDefaultNodeId" resultType="java.lang.Integer">
		select id from node where type='COMPANY' and name='四川航空' limit 1
	</select>
	
	<update id="update" parameterType="java.util.Map">
		update person set
		 name=#{name,jdbcType=VARCHAR}
		,gender=#{gender,jdbcType=VARCHAR}
		,id_card=#{idCard,jdbcType=VARCHAR}
		,username=#{employeeNo,jdbcType=VARCHAR}
		,tag = #{tag,jdbcType=VARCHAR, typeHandler=JSONOBJECT}
		where
		id=#{id}
	</update>
	<update id="updateEmployee" parameterType="java.util.Map">
		update employee set employee_no = #{employeeNo,jdbcType=VARCHAR} where person = #{id}
	</update>
	
	
	<select id="listPersonByIds" resultType="java.util.Map" parameterType="java.util.Map">
	    select d.id,d.username,d.name,c.name nodeName 
	    from person d left join person_station a on d.id=a.person left join
	      sys_station b on a.station=b.id left join 
	      node c on b.node=c.id  where d.id in
		<foreach collection="ids" index="index" item="tag" open="("
    		separator="," close=")">
    		#{tag}
    	</foreach>
	</select>
	
	<select id="listPersonByNames" resultType="java.util.Map" parameterType="java.util.Map">
	    select d.id,d.name,c.name nodeName
	     from person d left join person_station a on  d.id=a.person left join
	      sys_station b on a.station=b.id left join
	       node c on  b.node=c.id  where d.name in
		<foreach collection="names" index="index" item="tag" open="("
    		separator="," close=")">
    		#{tag}
    	</foreach>
	</select>
</mapper>