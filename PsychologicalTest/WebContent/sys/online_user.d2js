d2js.fetch = function(params){
	sql{.
		code{.
			if(params.node){
				sql{.
				with recursive p as (select id from node d where id = :node
					union
				select f.id from node f, p where f.parent_id = p.id)
			select ol.*,n.name node_name from online_user ol,node n 
			where ol.node = n.id and n.id = any(select id from p)
				.}
			}else{
				sql{.
					select ol.*,n.name node_name from online_user ol,node n where ol.node = n.id
				.}
			}
		
		.}
		
		sql{.?(params.employeeNo)
			and  strpos(ol.employee_no,:employeeNo) > 0 
		.}
		
		sql{.?(params.name)
			and strpos(ol.employee_name, :name) > 0
		.}
		
	.}
	
	return this.query(sql,params,params._page)
}

d2js.create = function(){
	var rcd ={
		"employee_no":this.session.user.person.employee_no,
		"employee_name":this.session.user.person.name,
		"node":(this.session.user.node.id)?this.session.user.node.id:0,
		"login_d":this.session.user.login.login_d,
		"em_id" : (this.session.user.person.employee) ? this.session.user.person.employee : -1
	}
	
	rcd.id = this.nextId('online_id_seq');
	return this.insertRow('online_user', rcd);
}

d2js.exports.mergeUser = 
d2js.mergeUser = function(emId){
	var rcd ={
		"employee_no":this.session.user.person.employee_no,
		"employee_name":this.session.user.person.name,
		"node":(this.session.user.node.id)?this.session.user.node.id:0,
		"login_d":this.session.user.login.login_d,
		"em_id" : (this.session.user.person.employee) ? this.session.user.person.employee : -1
	}
	
	var sql = "select * from online_user where em_id = ?";
	var row = this.queryRow(sql,[emId]);
	if(row){
		rcd.id = row.id;
		return this.updateRow('online_user',rcd);
	}else{
		rcd.id = this.nextId('online_id_seq');
		return this.insertRow('online_user', rcd);
	}
	
}


d2js.destroy = function(rcd){
	this.deleteRow('online_user',rcd);
}

d2js.exports.cleanAll = true;
d2js.cleanAll = function(){
	var sql = "delete from online_user";
	this.execute(sql);
}